{"version":3,"sources":["content/MasonryLayout.js","services/InstagramRepository.js","main/ScrollEndEvent.js","main/SearchBox.js","main/Main.js","home/Home.js","services/SnsTimeFormatter.js","media-info/Comment.js","media-info/Detail.js","media-info/MediaInfo.js","App.js","serviceWorker.js","index.js"],"names":["MASONRY_OPTIONS","transitionDuration","MasonryLayout","_this$props","this","props","userId","itemChdilrens","items","map","item","react_default","a","createElement","className","key","id","href","concat","src","alt","lib_default","options","disableImagesLoaded","updateOnEachImageLoad","Component","defaultProps","DEFAULT_PARAMS","count","InstagramRepository","arguments","length","undefined","Object","classCallCheck","$latestId","$last","res","medias","params","last","axios","get","catch","data","media","then","response","ScrollEndEvent","window","_this","margin","possibleConstructorReturn","getPrototypeOf","call","source","fromEvent","pipe","filter","scrollY","innerHeight","document","body","scrollHeight","Observable","DEFAULT_SEARCH","SearchBox","onChangeSnsIdSource","Subject","defaultSearch","queryString","parse","location","search","q","onChange","startWith","subscribe","query","_this2","type","defaultValue","e","next","target","value","Main","state","repository","onSearchBoxChangeSource","onSearchBoxChange$","debounceTime","onScrollEnd$","isPending","combineLatest","arr","tap","setInstagramId","nextMedias","_ref","asyncToGenerator","regenerator_default","mark","_callee","results","isUpdate","newItems","oldItems","wrap","_context","prev","t0","tumbnailSrc","sent","setState","stop","_x","apply","_this$state","SearchBox_SearchBox","MasonryLayout_MasonryLayout","Home","src_main_Main","SnsTimeFormatter","time","baseTime","diff","Math","floor","getMonth","getDate","Comment","commentCreatedAt","formatter","Date","timestamp","interval$","interval","now","parseBy","text","userProfileSrc","Detail","mediaSrc","elmComments","comments","c","i","Comment_Comment","toString","MediaInfo","isDone","onDetailFetch$","from","match","user","detail","Detail_Detail","sort","b","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86b7f160.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Masonry from 'react-masonry-component';\nimport './MasonryLayout.css';\n\nconst MASONRY_OPTIONS = {\n  transitionDuration: 0,\n};\n\nexport default class MasonryLayout extends Component {\n  render() {\n    const { userId, items } = this.props;\n    const itemChdilrens = items.map(item => (\n      <div className=\"item\" key={item.id}>\n        <a href={!userId ? '#' : `./${userId}/${item.id}`}>\n          <img className=\"thumbnail\" src={item.src} alt=\"thumbnail\" />\n        </a>\n      </div>\n    ));\n\n    return (\n      <Masonry\n        className=\"MasonryLayout\"\n        options={MASONRY_OPTIONS}\n        disableImagesLoaded={false}\n        updateOnEachImageLoad={false}\n      >\n        {itemChdilrens}\n      </Masonry>\n    );\n  }\n}\n\nMasonryLayout.propTypes = {\n  userId: PropTypes.string,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    src: PropTypes.string,\n  })),\n};\n\nMasonryLayout.defaultProps = {\n  userId: '',\n  items: [\n    { id: '1', src: 'https://i.imgur.com/c3s8eqU.jpg' },\n    { id: '2', src: 'https://i.imgur.com/IgB7tpM.jpg' },\n    { id: '3', src: 'https://i.imgur.com/T85TaZN.png' },\n    { id: '4', src: 'https://i.imgur.com/TfSJnWE.jpg' },\n    { id: '5', src: 'https://i.imgur.com/DxFDaWi.jpg' },\n    { id: '6', src: 'https://i.imgur.com/ra03Qce.jpg' },\n    { id: '7', src: 'https://i.imgur.com/kSj5X0Q.jpg' },\n    { id: '8', src: 'https://i.imgur.com/B45yGfm.jpg' },\n    { id: '9', src: 'https://i.imgur.com/Y1QVk9A.jpg' },\n    { id: '10', src: 'https://i.imgur.com/5NLQX9d.jpg' },\n  ],\n};\n","import axios from 'axios';\n\n/**\n * @typedef Media\n * @property {string} id\n * @property {number} timestamp\n * @property {string} tumbnailSrc\n */\n/**\n * @typedef Comment\n * @property {string} text\n * @property {number} timestamp\n * @property {string} userId\n * @property {string} userProfileSrc\n */\n/**\n * @typedef Detail\n * @property {string} mediaSrc\n * @property {string} text\n * @property {number} timestamp\n * @property {string} userId\n * @property {string} userProfileSrc\n * @property {Array<Comment>} comments\n */\n\nconst DEFAULT_PARAMS = {\n  count: 20,\n};\n\nexport default class InstagramRepository {\n  constructor(id = '') {\n    this.$latestId = id;\n    this.$last = '';\n  }\n\n  /**\n   * @param {string} id Instagram ID\n   * @return {boolean} 업데이트 여부\n   */\n  setInstagramId(id) {\n    let res = false;\n    if (this.$latestId !== id) {\n      this.$latestId = id;\n      this.$last = '';\n      res = true;\n    }\n    return res;\n  }\n\n  /**\n   * @return {Promise<Array<Media>>}\n   * 결과가 없으면 빈 배열 반환\n   */\n  async nextMedias() {\n    let medias = [];\n    const params = {\n      ...DEFAULT_PARAMS,\n      last: this.$last,\n    };\n    const res = await axios.get(\n      `http://35.200.41.28:5000/users/${this.$latestId}/medias`, { params },\n    ).catch(() => null);\n\n    if (res) {\n      this.$last = res.data.last;\n      medias = medias.concat(res.data.medias);\n    }\n\n    return medias;\n  }\n\n  /**\n   * @param {string} media media id\n   * @return {Promise<Detail>}\n   */\n  async detail(media) {\n    const res = await axios.get(\n      `http://localhost:5000/users/${this.$latestId}/medias/${media}`,\n    ).then(response => (\n      response.data\n    )).catch(() => null);\n    return res;\n  }\n}\n","import { fromEvent, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport default class ScrollEndEvent extends Observable {\n  /**\n   * @param {Window} window\n   * @param {number} margin default: 100\n   */\n  constructor(window, margin = 100) {\n    super();\n    this.source = fromEvent(window, 'scroll').pipe(\n      filter(() => (\n        window.scrollY + window.innerHeight + margin > document.body.scrollHeight\n      )),\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Subject } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport queryString from 'query-string';\n\nconst DEFAULT_SEARCH = 'instagram';\n\nexport default class SearchBox extends Component {\n  constructor() {\n    super();\n    this.onChangeSnsIdSource = new Subject();\n    this.defaultSearch = queryString.parse(window.location.search).q || DEFAULT_SEARCH;\n  }\n\n  componentDidMount() {\n    const { onChange } = this.props;\n    this.onChangeSnsIdSource.pipe(\n      startWith(this.defaultSearch),\n    ).subscribe((query) => {\n      onChange(query);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          defaultValue={this.defaultSearch}\n          onChange={e => this.onChangeSnsIdSource.next(e.target.value)}\n        />\n      </div>\n    );\n  }\n}\n\nSearchBox.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { combineLatest, Subject } from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  tap,\n} from 'rxjs/operators';\nimport './Main.css';\nimport MasonryLayout from '../content/MasonryLayout';\nimport InstagramRepository from '../services/InstagramRepository';\nimport ScrollEndEvent from './ScrollEndEvent';\nimport SearchBox from './SearchBox';\n\nclass Main extends Component {\n  state = {\n    items: [],\n  }\n\n  constructor() {\n    super();\n    this.repository = new InstagramRepository();\n    this.onSearchBoxChangeSource = new Subject();\n\n    const onSearchBoxChange$ = this.onSearchBoxChangeSource.pipe(\n      debounceTime(1000),\n    );\n    const onScrollEnd$ = new ScrollEndEvent(window).pipe(\n      startWith(null),\n    );\n    let isPending = false;\n\n    combineLatest(\n      onSearchBoxChange$,\n      onScrollEnd$,\n    ).pipe(\n      filter(() => !isPending),\n      map(arr => arr[0]),\n      filter(query => !!query),\n      tap(() => { isPending = true; }),\n      map(query => [\n        this.repository.setInstagramId(query),\n        this.repository.nextMedias(),\n        query,\n      ]),\n    ).subscribe(async (results) => {\n      const isUpdate = results[0];\n      const newItems = (await results[1]).map(media => ({\n        id: media.id,\n        src: media.tumbnailSrc,\n      }));\n      const userId = results[2];\n      const { items: oldItems } = this.state;\n      const items = isUpdate\n        ? newItems\n        : oldItems.concat(newItems);\n      this.setState({ userId, items });\n      isPending = false;\n    });\n  }\n\n  render() {\n    const { userId, items } = this.state;\n    return (\n      <div className=\"Main\">\n        <SearchBox onChange={id => this.onSearchBoxChangeSource.next(id)} />\n        <MasonryLayout userId={userId} items={items} />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './Home.css';\nimport Main from '../main/Main';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <header className=\"header\">omni stagram</header>\n        <article className=\"body\">\n          <Main />\n        </article>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","const MS_SECOND = 1000;\nconst MS_MINUTE = 60000;\nconst MS_HOUR = 3600000;\nconst MS_DAY = 86400000;\nconst MS_SECONDS_CL = 60000;\nconst MS_MINUTES_CL = 3600000;\nconst MS_HOURS_CL = 86400000;\nconst MS_DAYS_CL = 2592000000;\n\nexport default class SnsTimeFormatter {\n  /**\n   * @param {Date} time the time to transform\n   */\n  constructor(time) {\n    this.time = time;\n  }\n\n  /**\n   * @param {Date} baseTime\n   * @return {string}\n   */\n  parseBy(baseTime) {\n    const { time } = this;\n    const diff = baseTime - time;\n    let transformed = '';\n\n    if (diff < MS_SECONDS_CL) {\n      transformed = `${Math.floor(diff / MS_SECOND)}초 전`;\n    } else if (diff < MS_MINUTES_CL) {\n      transformed = `${Math.floor(diff / MS_MINUTE)}분 전`;\n    } else if (diff < MS_HOURS_CL) {\n      transformed = `${Math.floor(diff / MS_HOUR)}시간 전`;\n    } else if (diff < MS_DAYS_CL) {\n      transformed = `${Math.floor(diff / MS_DAY)}일 전`;\n    } else {\n      transformed = `${time.getMonth() + 1}/${time.getDate()}`;\n    }\n\n    return transformed;\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { interval } from 'rxjs';\nimport './Comment.css';\nimport SnsTimeFormatter from '../services/SnsTimeFormatter';\n\nexport default class Comment extends Component {\n  state ={\n    commentCreatedAt: '',\n  };\n\n  constructor(props) {\n    super(props);\n    this.formatter = new SnsTimeFormatter(new Date(props.timestamp * 1000));\n    this.interval$ = interval(1000);\n  }\n\n  componentDidMount() {\n    this.interval$.subscribe(() => {\n      const now = new Date();\n      const commentCreatedAt = this.formatter.parseBy(now);\n      this.setState({ commentCreatedAt });\n    });\n  }\n\n  render() {\n    const { text, userId, userProfileSrc } = this.props;\n    const { commentCreatedAt } = this.state;\n    return (\n      <div className=\"Comment\">\n        <img className=\"img-profile\" src={userProfileSrc} alt=\"profile\" />\n        <a className=\"link-user\" href={`/?q=${userId}`}>\n          <span className=\"txt-username\">{userId}</span>\n        </a>\n        <span className=\"txt-comment\">{text}</span>\n        <span className=\"txt-time\">{commentCreatedAt}</span>\n      </div>\n    );\n  }\n}\n\nComment.propTypes = {\n  text: PropTypes.string.isRequired,\n  timestamp: PropTypes.number.isRequired,\n  userId: PropTypes.string.isRequired,\n  userProfileSrc: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Detail.css';\nimport Comment from './Comment';\n\nexport default class Detail extends Component {\n  render() {\n    const {\n      text,\n      timestamp,\n      userId,\n      userProfileSrc,\n      mediaSrc,\n      comments,\n    } = this.props;\n    const elmComments = comments.map((c, i) => (\n      <Comment\n        key={i.toString()}\n        text={c.text}\n        timestamp={c.timestamp}\n        userId={c.userId}\n        userProfileSrc={c.userProfileSrc}\n      />\n    ));\n    return (\n      <div className=\"Detail\">\n        <div className=\"body\">\n          <img className=\"img-main\" src={mediaSrc} alt=\"media\" />\n          <Comment\n            text={text}\n            timestamp={timestamp}\n            userId={userId}\n            userProfileSrc={userProfileSrc}\n          />\n          <div className=\"box-comments\">\n            {elmComments}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nDetail.propTypes = {\n  text: PropTypes.string.isRequired,\n  mediaSrc: PropTypes.string.isRequired,\n  timestamp: PropTypes.number.isRequired,\n  userId: PropTypes.string.isRequired,\n  userProfileSrc: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string.isRequired,\n      timestamp: PropTypes.number.isRequired,\n      userId: PropTypes.string.isRequired,\n      userProfileSrc: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { from } from 'rxjs';\nimport './MediaInfo.css';\nimport InstagramRepository from '../services/InstagramRepository';\nimport Detail from './Detail';\n\nexport default class MediaInfo extends Component {\n  state = {\n    isDone: false,\n    text: '',\n    timestamp: 0,\n    userId: '',\n    userProfileSrc: '',\n    mediaSrc: '',\n    comments: [],\n  }\n\n  constructor(props) {\n    super(props);\n    this.onDetailFetch$ = from(\n      new InstagramRepository(props.match.params.user).detail(props.match.params.media),\n    );\n  }\n\n  componentDidMount() {\n    this.onDetailFetch$.subscribe((detail) => {\n      this.setState({\n        isDone: true,\n        text: detail.text,\n        timestamp: detail.timestamp,\n        userId: detail.userId,\n        userProfileSrc: detail.userProfileSrc,\n        mediaSrc: detail.mediaSrc,\n        comments: detail.comments,\n      });\n    });\n  }\n\n  render() {\n    const {\n      isDone,\n      text,\n      timestamp,\n      userId,\n      userProfileSrc,\n      mediaSrc,\n      comments,\n    } = this.state;\n    return (\n      <div className=\"MediaInfo\">\n        {\n          isDone\n            ? (\n              <Detail\n                text={text}\n                timestamp={timestamp}\n                userId={userId}\n                userProfileSrc={userProfileSrc}\n                mediaSrc={mediaSrc}\n                comments={comments.sort((a, b) => b.timestamp - a.timestamp)}\n              />\n            )\n            : 'Loading...'\n        }\n      </div>\n    );\n  }\n}\n\nMediaInfo.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      media: PropTypes.string,\n      user: PropTypes.string,\n    }),\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './home/Home';\nimport MediaInfo from './media-info/MediaInfo';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/:user/:media\" component={MediaInfo} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}